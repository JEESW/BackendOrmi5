User - Server - DB의 아키텍쳐 문제점
1. 서버 역할의 과다
2. 배포 할 때 마다 동일 서버 접근
3. 확장성이 안 좋음

해결책
서버의 역할 분리

Azure Blob Storage(프론트 파일) - User - Server - DB
1. 확장성 증가
2. 유연성 증가
3. 유지 보수성 (적당히 쪼갰을 때만)

여전히 존재하는 문제
1. 통신 지연(http 3-way-handshake, 폴링)
2. 네트워크 오버헤드

웹 소켓으로 해결
양방향 통신(네트워크 오버헤드 감소, 지연 시간 감소), stateful한 통신

여전히 서버의 역할 과다
- 아직 부족한 확장성

해결책 
api 서버, 채팅 서버, ai 연결 서버 분리
사진(1)

1. 확장성 증가
2. 유연성 증가
3. 유지 보수성
4. 보안

문제점
장애 복구 힘듦 -> 서버와 서버 사이 메세지 큐를 둠
사진(2)

메시지 큐: 서버간 통신을 지원하는 시스템

1. 메시지 전달 / 소비로 구성
2. 비동기 통신
3. 결합도 감소
4. 장애 복구

--------------------------------------------------------------------------------------

Azure Function
Serverless - FaaS(Function As A Service) -> 함수 짜는데 만 집중하면 됨
사진(3)

장점: 개발 속도 빨라짐, 관리 부담 감소(서버 생각 안해도 되서), 비용 절감(서버리스에서는 함수 실행 횟수에 따라 비용이 정해짐)
단점: 콜드 스타트(요청이 들어올 때 서버가 켜지고 일정 시간이 지나면 다시 자러가므로 첫 요청 처리가 느림), 벤더 종속성(Service Provider에 종속됨), 제한된 환경(서버에 대한 자유도 부족), Stateless 모델(Redis 같은 외부 저장소를 활용 해야 함)

DB는 Azure Cosmos DB(Serverless)를 사용함.
사용한 만큼만 요금 지불, 콜드 스타트 문제 X

--------------------------------------------------------------------------------------

서버: FastAPI / Python 3.11 (Node.js 20.14 설치만)
DB: MongoDB 6.0

Fast API는 Azure Funtion으로 전환 가능함.
NoSQL은 JSON으로 처리 가능함. (Python의 dictionary와 매칭이 잘 됨.)

--------------------------------------------------------------------------------------

플로우

사진(4)

Azure Blob Storage (①): 사용자가 웹 애플리케이션을 통해 Azure Blob Storage에서 데이터를 가져옴. 이 데이터는 채팅에 필요한 사용자 정보나 기타 설정일 수 있음.

API Function 호출 (②): 사용자가 채팅을 시작하거나 메시지를 입력하면, API Function이 호출됨. 이 함수는 사용자의 요청을 처리하기 위한 첫 번째 단계임.

Azure Web PubSub 연결 (③): 사용자의 채팅 메시지가 Azure Web PubSub를 통해 실시간으로 전송됨. Web PubSub는 웹 애플리케이션과 서버 간의 실시간 통신을 관리함.

API Function에서 사용자 응답 처리 (④): API Function은 사용자가 보낸 요청을 처리하고, 필요한 데이터를 Blob Storage에서 가져오거나, 추가적인 처리를 위해 다른 함수나 서비스와 연동함.

Azure Service Bus로 메시지 전달 (⑤): API Function에서 처리된 메시지는 Azure Service Bus로 전송됨. Azure Service Bus는 메시지를 큐에 넣어, 나중에 다른 함수나 서비스가 이 메시지를 처리할 수 있도록 함.

Azure OpenAI 연동 (⑥): Agent Function은 Azure Service Bus에서 메시지를 가져와서 Azure OpenAI API와 연동함. 이 단계에서 메시지에 대한 AI 기반의 응답이 생성됨.

Agent Function 처리 (⑦): Azure OpenAI로부터 응답을 받은 Agent Function은 이를 적절히 가공하여 최종 응답을 준비함.

Chatting Function 호출 (⑧): 준비된 응답은 다시 Azure Web PubSub를 통해 사용자의 클라이언트로 전송되며, 이 과정에서 Chatting Function이 호출됨.

사용자에게 응답 전송 (⑨): Chatting Function은 Azure Web PubSub를 통해 실시간으로 사용자에게 응답을 전송함. 사용자는 클라이언트에서 이 응답을 확인할 수 있음.

--------------------------------------------------------------------------------------

계층
(사진5)

리소스 그룹: 리소스들을 묶어 관리하기 위한 단위
모든 리소스는 무조건 특정한 리소스 그룹에 속해야함.

사용 목적
1. 배포 자동화
2. 라이프 사이클 관리
3. 그룹 단위 리소스 복제


구독 : 리소스를 관리하고 비용을 지불하는 기본 단위
하나의 리소스는 하나의 구독과 연결

사용 목적
1. 액세스 권한 제어
2. 실행 환경 분리

관리 그룹: 큰 조직 내에서 리소스를 효율적으로 다루기 위함.

사용 목적
1. 계층적 관리
2. 여러 구독에 대한 액세스 권한 관리

--------------------------------------------------------------------------------------

1. 블롭 스토리지에 프론트 파일 올리기

메시지 박스 구현 시 키보드 이벤트의 isComposing 문제
https://velog.io/@o1_choi/isComposing

2. Web PubSub 서비스를 이용하고 front와 연결하기

빠른 시작에서 웹 소켓 테스트를 할 수 있음
front 쪽 html에서 전달 받은 메시지를 뜨게함.
처음에는 연결되면서 data나 key값이 없으므로 undefined가 뜸. 따라서 if문으로 data가 있을 때만 메시지 창에 띄우게 함.

3. Fast API 작성
Fast API = Starlette + Pydantic
Starlette: 경량 ASGI 프레임 워크
Pydantic: 데이터 검증 / 직렬화

serverless는 aws에서 lambda로 제공됨.

서버리스는 HTTP요청, MQ실행, 파일 업로드 할 때 실행 됨.

- 프론트가 API 한테 PubSub Token 발급 요청
- Question API로 요청을 해서 질문 요청

4. Cosmos DB: 글로벌 분산 멀티 모델 DB 서비스
글로벌 분산: 전 세계 여러 지역에 복제한다. 따라서 어디서 접근하더라도 지연시간이 낮다
멀티 모델: 문서, Key-Value, 그래프 등 다양한 데이터 모델을 지원함.

특징
데이터 암호화: 저장 및 전송(SSL/TLS) 중 모두 암호화 제공
Azure Active Directory와 통합함.

사용하는 방식
Mongo DB를 사용
Request Unit 기반과 vCore Cluster가 있는데 Request Unit을 사용함.
Serverless 방식 사용

5. Azure Service Bus(메시지 큐를 통해 에이전트에 데이터 전달)

메시징 서비스를 하는 이유
비동기 통신을 위함, 결합도 하락을 위함, 부하를 분산 시키기 위함, 스케일링 및 유연성 증진을 위함, 통합 용이성을 위함

Azure Service Bus를 쓰는 이유
- 고가용성, 확장성, 보안, 통합 / 관리 용이
- 큐, 토픽/구독을 제공함
- 메시지를 수신하면 처리하고 제거하는 방식 때문에 장애 복구에 좋음

Azure Service Bus + Azure Function
- 큐의 메시지를 감지하여 Funtion의 실행이 가능
- Blob Storage나 CosmosDB와도 연결 가능

6. Agent Function 만들기
7. 앨런 API 연결

마크 다운 형태로 답변이 옴
sse 방식이 권장됨
https://kdt-api-function.azurewebsites.net/docs#/